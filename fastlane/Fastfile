###
###  iOS
###

platform :ios do
  desc "Pull Request verification"
  lane :pull_request_verification do
    xcversion(version: "~> 11.5.0")
    scan(
      workspace: "Beagle.xcworkspace",
      scheme: "All",
      device: "iPhone 11"
    )
    check_if_beagle_works_via_cocoapods_integration
    check_if_beagle_works_via_spm_integration
  end

  desc "Check whether Beagle is working via CocoaPods in an Example Project"
  private_lane :check_if_beagle_works_via_cocoapods_integration do
    xcversion(version: "~> 11.5.0")
    cocoapods(
      clean_install: true,
      podfile: "Example/CocoaPodsTest/Podfile"
    )
    scan(
      workspace: "Example/CocoaPodsTest/CocoaPodsTest.xcworkspace",
      scheme: "CocoaPodsTest",
      device: "iPhone 11"
    )
  end

  desc "Check whether Beagle is working via SPM in an Example Project"
  private_lane :check_if_beagle_works_via_spm_integration do
    scan(
      project: "Example/SPMTest/SPMTest.xcodeproj",
      scheme: "SPMTest",
      device: "iPhone 11"
    )
  end

  # desc "Release Pods"
  # lane :release_pods do |options|
  #   version = options[:version] # 1.0.0
  #    tag = options[:tag] # 1.0.0[-iOS]
  #    update_podspec(path: "Beagle.podspec", version: version, tag: tag)
  #    pod_push(path: "Beagle.podspec", allow_warnings: true)
  # end
end

def update_podspec(path:, version:, tag:)
  rootPath = "../" + path
  file = File.read(rootPath)

  version_regex = /\.version = (.*)\n/
  tag_regex = /tag = (.*)\n/

  has_version_and_tag = version_regex.match(file) && tag_regex.match(file)
  if not has_version_and_tag
    UI.user_error!("podspec at #{path} should have version and tag")
  end

  new_content = file
    .gsub(version_regex, ".version = '#{version}'\n")
    .gsub(tag_regex, "tag = '#{tag}'\n")

  File.write(rootPath, new_content)
end

desc "Publish new release based on last two tags"
lane :deploy do
  sh "git fetch"

  tagName = ENV["TAG_NAME"].split("/").last

  ENV["VERSION_DEPLOY"] = tagName

  sh "git checkout tags/#{tagName} -b newReleaseFromTag#{tagName}"
  sh "fastlane ios release_pods version:#{tagName} tag:#{tagName}"

  releaseNotes = release_notes(versionDeploy: tagName)
  sh "bash ./delete_release.sh " + tagName
  set_github_release(
    repository_name: ENV["REPO"],
    api_token: ENV["REPO_TOKEN"],
    name: tagName,
    tag_name: tagName,
    description: releaseNotes,
    commitish: ENV["COMMITISH"]
  )
end

lane :run_danger do |options|
  danger_id = options[:danger_id] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger_file_path = options[:danger_file_path] || lane_context[SharedValues::PLATFORM_NAME].to_s
  danger(
    danger_id: danger_id,
    dangerfile: "danger/#{danger_file_path}/Dangerfile",
    github_api_token: ENV[
      "GITHUB_TOKEN"],
    verbose: true,
  )
end

###
###  Release Notes
###

desc "Generate release notes"
private_lane :release_notes do |params|
  get_previous_tag = lastExpectedVersion(newVersion:params[:versionDeploy])
  tagHashes = sh "git show-ref -s #{get_previous_tag}"

  lane_context[SharedValues::RELEASE_ANALYZED] = true
  lane_context[SharedValues::RELEASE_LAST_TAG_HASH] = tagHashes.split("\n").last
  lane_context[SharedValues::RELEASE_NEXT_VERSION] = params[:versionDeploy]
  lane_context[SharedValues::CONVENTIONAL_CHANGELOG_ACTION_FORMAT_PATTERN] = "(feat|fix|refactor|perf|chore|test|docs|no_type|ci)(:)()(.*)"
  sections = {
    feat: "Features",
    fix: "Bug fixes",
    refactor: "Code refactoring",
    perf: "Performance improvements",
    chore: "Building system",
    test: "Testing",
    docs: "Documentation",
    ci: "CI/CD",
    no_type: "Other work"
  }
  order = ["feat", "fix", "refactor", "perf", "chore", "test", "docs", "ci", "no_type"]
  changelog = conventional_changelog(sections: sections, order: order, display_title: false, display_links: false)
  changelog = changelog.gsub("**::**  ", "")
  "\nRelease notes #{params[:versionDeploy]}
   \nChanges:
   \n#{changelog}"
end

private_lane :danger_token_available? do
  danger = ENV["GITHUB_TOKEN"]
  !(danger.nil? || danger.empty?)
end

after_all do |lane, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

error do |lane, exception, options|
  if lane == :pull_request_verification
    if danger_token_available?
      run_danger
    end
  end
end

# input: 1.2.0; output: 1.1.0
# input: 1.2.2; output: 1.2.1
# input: 3.0.0; output: 2.0.0
lane :lastExpectedVersion do |params|
  releaseNumberArray = params[:newVersion].split(".")
  lastVersion = ""
  calculated = false
  for number in releaseNumberArray.reverse()
    intNumber = number.to_i
    if intNumber != 0 && !calculated
      intNumber -= 1
      calculated = true
    end
    lastVersion = ".#{intNumber}" + lastVersion
  end
  lastVersion[0] = ""

  version = lastVersion
  "#{version}"
end